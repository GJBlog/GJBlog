[ { "title": "OC-属性可空标识符", "url": "/posts/OC-Property-Compiler-Identifier/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2021-03-06 20:29:00 +0800", "snippet": "总结OC中关于属性的编译器标识符关于OC中目前涉及到是否可为空相关的属性、方法标识符整理如下属性 表示修饰的属性或者参数可以为空// 写法一@property (nonatomic, strong, nullable) NSString *name;// 写法二@property (nonatomic, strong) NSString *_Nullable name2;// 写法三@property (nonatomic, copy) NSString *__nullable name3; 表示修饰的属性或者参数不能为空// 写法一@property (nonatomic, cop..." }, { "title": "计算机网络-运输层", "url": "/posts/network-transport/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-06-07 22:34:00 +0800", "snippet": "运输层运输层的位置 它向上面的应用层提供通信服务，属于面向通信部分的最高层，同时也是用户功能中的最低层 真正进行通信的实体是在主机中的进程，是这个主机中的一个进程和两一个主机中的一个进程在交换数据(通信)，所以严格说，两个主机进行通信就是两个主机中的应用进程互相通信。运输层的很重要功能 复用：指在发送方不同的应用进程都可以使用同一个运输层协议传送数据 分用：指接收方的运输层在剥去报文的首部后能够把这些数据正确交付到目的应用进程运输层协议面向连接的TCP协议 名称：传输控制协议(Transmission Control Protocl) 提供一条全双工的可靠信道 数据单位：按..." }, { "title": "CSS-文字、文本", "url": "/posts/CSS-%E6%96%87%E5%AD%97-%E6%96%87%E6%9C%AC/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2018-05-20 00:34:00 +0800", "snippet": "CSS-文字、文本1、style标签中type属性默认是type=”text/css”2、样式：标签名称 { 属性名称：属性对应的值}3、文字属性 文字样式font-style: italic;normal：正常(默认)italic：倾斜 文字粗细font-weight：bold;单词取值：bold：加粗bolder：更粗lighter：细线(默认)数字取值：100~900之间整百 文字大小font-size：30px;单位：像素 文字字体font-family：”微软雅黑&quot;,备选字体,……中文名称必须要使用双引号或者单引号括起来中文字体能处理英文，英文字体不能处..." }, { "title": "App-重签名", "url": "/posts/App-%E9%87%8D%E7%AD%BE%E5%90%8D/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2018-03-11 00:34:00 +0800", "snippet": "App的重签名在有些情况下，我们或许会需要对AppStore下载的App或者其他App有重签名的操作，比如说在分发某个App的ipa包，并没有修改App的源码，因为看不到App的源码，无法直接使用自己的账号来打包，这个使用就需要使用到App的重签名！那么通常的重签名方式都有哪些呢？1、ios-app-signer 工具工具界面如下所示， input File：选择对应的.ipa包 Signing Certificate：选择对应的证书 Provisioning Profile：选择对应的描述文件 其他选项都是可选2、sigh脚本 通过 Homebrew 安装 rubybrew ..." }, { "title": "Swift-集合", "url": "/posts/Swift-%E9%9B%86%E5%90%88/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2018-03-10 20:55:00 +0800", "snippet": "三、集合类型(Collection Types)1、数组(Arrays) 使用有序表存储同一类型的多个值。var someInts = [Int]()var someInts = Array&amp;lt;Int&amp;gt;()var shoppingList: [String] = [&quot;Eggs&quot;, &quot;Milk&quot;]2、集合(Set) 存储相同类型并且没有确定顺序的值。当集合元素顺序不重要时或者希望确保每个元素只出现一次时可以使用集合而不是数组。 一个类型要想存储在集合中，必须是可哈希化。需要提供一个方法来计算它的Hash值。相等的对象哈..." }, { "title": "Swift-字符串和字符", "url": "/posts/Swift-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2018-03-04 14:10:00 +0800", "snippet": "二、字符串和字符(Strings and Characters)1、字符串字面量(String Literals)let something = &quot;some string&quot;2、多行字符串字面量(Multiline String Literals)let quotation = &quot;&quot;&quot;the White Rabbit put on his spectaclestill you come to ……&quot;&quot;&quot;3、在多行字符串字面量中通过在行尾添加\\来取消换行符,且不可以在最后一行添加\\let some = &quot..." }, { "title": "Swift-常量与变量", "url": "/posts/Swift-%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F/", "categories": "Blogging, Demo", "tags": "typography", "date": "2018-03-03 11:33:00 +0800", "snippet": "一、常量与变量1、使用之前必须声明let constant = &quot;常量&quot;var variable = &quot;变量&quot;2、一行声明多个变量和多个变量赋值var red, green, blue: Doublevar x = 0.0, y = 0.0, z = 0.03、变量、常量名的命名 不能以数字开头 如果非要使用Swfit关键字，则需要关键字前后添加反引号(`) 如果在使用printf打印输出时不想换行，可以设置terminator参数为””let (`let`) = &quot;let关键字&quot;print(&quot;输出&quot;,..." } ]
